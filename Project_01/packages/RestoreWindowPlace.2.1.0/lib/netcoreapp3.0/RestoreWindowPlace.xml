<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestoreWindowPlace</name>
    </assembly>
    <members>
        <member name="T:RestoreWindowPlace.WindowPlace">
            <summary>
            Save size and position of window to file
            </summary>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.#ctor(System.String)">
            <summary>
            Save size and position of window to file
            </summary>
            <param name="filePath">Name or path of XML file to save</param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Save">
            <summary>
            Save setting file
            </summary>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Load">
            <summary>
            Load setting file
            </summary>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Restore(System.Windows.Window,System.String)">
            <summary>
            Restore size and position
            </summary>
            <param name="window"></param>
            <param name="key"></param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.RestorePosition(System.Windows.Window,System.String)">
            <summary>
            Restore only position
            </summary>
            <param name="window"></param>
            <param name="key"></param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Store(System.Windows.Window,System.String)">
            <summary>
            Store size and position
            </summary>
            <param name="window"></param>
            <param name="key"></param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Register(System.Windows.Window,System.String)">
            <summary>
            Register the event that store/restore size and position of Window automatically
            using unique ID
            </summary>
            <param name="window">target window</param>
            <param name="windowId">Unique ID associated with the window</param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.Register``1(``0)">
            <summary>
            Register the event that store/restore size and position of Window automatically
            using the name of the type extends Window class
            </summary>
            <param name="window">target window</param>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.RegisterPositionOnly(System.Windows.Window,System.String)">
            <summary>
            Register the event that store/restore position of Window automatically
            using unique ID
            </summary>
            <param name="window">target window</param>
            <param name="windowId">Unique ID associated with the window</param>
            <remarks>The size of the window is not restored.</remarks>
        </member>
        <member name="M:RestoreWindowPlace.WindowPlace.RegisterPositionOnly``1(``0)">
            <summary>
            Register the event that store/restore position of Window automatically
            using the name of the type extends Window class
            </summary>
            <param name="window">target window</param>
            <remarks>The size of the window is not restored.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:RestoreWindowPlace.WindowPlace.IsRegistered(System.String)" -->
        <member name="T:RestoreWindowPlace.WindowRelocate">
            <summary>
            Operate window using WindowPlacement
            </summary>
        </member>
        <member name="M:RestoreWindowPlace.WindowRelocate.Relocate(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Set position and size to window
            </summary>
            <param name="windowHandle"></param>
            <param name="position">
            Position and size. If width &lt; 0 maximized, if height &lt; 0 minimized. If height and width are 0 ignore size
            </param>
        </member>
        <member name="M:RestoreWindowPlace.WindowRelocate.Relocate(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Set position to window
            </summary>
            <param name="windowHandle"></param>
            <param name="left"></param>
            <param name="top"></param>
        </member>
        <member name="M:RestoreWindowPlace.WindowRelocate.GetPlace(System.IntPtr)">
            <summary>
            Get position and size of window
            </summary>
            <param name="windowHandle"></param>
            <returns></returns>
        </member>
        <member name="T:RestoreWindowPlace.WindowsApi.Point">
            <summary>
            The Point structure defines the x- and y-coordinates of a point.
            http://www.pinvoke.net/default.aspx/Structures/POINT.html
            </summary>
        </member>
        <member name="T:RestoreWindowPlace.WindowsApi.Rect">
            <summary>
            The Rect structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            http://www.pinvoke.net/default.aspx/Structures/RECT.html
            </summary>
        </member>
        <member name="T:RestoreWindowPlace.WindowsApi.WindowPlacement">
            <summary>
            The WINDOWPLACEMENT structure contains information about the placement of a window on the screen.
            http://www.pinvoke.net/default.aspx/Structures/WINDOWPLACEMENT.html
            </summary>
        </member>
        <member name="T:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT">
            <summary>
            Contains information about the placement of a window on the screen.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.Length">
            <summary>
            The length of the structure, in bytes.
            Before calling the GetWindowPlacement or SetWindowPlacement functions, 
            set this member to sizeof(WINDOWPLACEMENT).
            <para>
            GetWindowPlacement and SetWindowPlacement fail if this member is not set correctly.
            </para>
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.Flags">
            <summary>
            Specifies flags that control the position of the minimized window and the method by which the window is restored.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.ShowCmd">
            <summary>
            The current show state of the window.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.MinPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is minimized.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.MaxPosition">
            <summary>
            The coordinates of the window's upper-left corner when the window is maximized.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.NormalPosition">
            <summary>
            The window's coordinates when the window is in the restored position.
            </summary>
        </member>
        <member name="P:RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT.Default">
            <summary>
            Gets the default (empty) value.
            </summary>
        </member>
        <member name="T:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands">
            <summary>
            Used with ShowWindow and WINDOWPLACEMENT.
            http://www.pinvoke.net/default.aspx/Enums/ShowWindowCommand.html
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Hide">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Normal">
            <summary>
            Activates and displays a window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when displaying the window
            for the first time.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowMinimized">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Maximize">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowMaximized">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>      
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowNoActivate">
            <summary>
            Displays a window in its most recent size and position. This value
            is similar to Win32.ShowWindowCommand.Normal, except
            the window is not activated.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Show">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Minimize">
            <summary>
            Minimizes the specified window and activates the next top-level
            window in the Z order.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowMinNoActive">
            <summary>
            Displays the window as a minimized window. This value is similar to
            Win32.ShowWindowCommand.ShowMinimized, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowNA">
            <summary>
            Displays the window in its current size and position. This value is
            similar to Win32.ShowWindowCommand.Show, except the
            window is not activated.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.Restore">
            <summary>
            Activates and displays the window. If the window is minimized or
            maximized, the system restores it to its original size and position.
            An application should specify this flag when restoring a minimized window.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ShowDefault">
            <summary>
            Sets the show state based on the SW_* value specified in the
            STARTUPINFO structure passed to the CreateProcess function by the
            program that started the application.
            </summary>
        </member>
        <member name="F:RestoreWindowPlace.WindowsApi.WindowPlacement.ShowWindowCommands.ForceMinimize">
            <summary>
             <b>Windows 2000/XP:</b> Minimizes a window, even if the thread
            that owns the window is not responding. This flag should only be
            used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="M:RestoreWindowPlace.WindowsApi.WindowPlacement.SetWindowPlacement(System.IntPtr,RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT@)">
            <summary>
            Sets the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to a WINDOWPLACEMENT structure that specifies the new show state and window positions.
            <para>
            Before calling SetWindowPlacement, set the length member of the WINDOWPLACEMENT structure to sizeof(WINDOWPLACEMENT).
            SetWindowPlacement fails if the length member is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="M:RestoreWindowPlace.WindowsApi.WindowPlacement.GetWindowPlacement(System.IntPtr,RestoreWindowPlace.WindowsApi.WindowPlacement.WINDOWPLACEMENT@)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">
            A handle to the window.
            </param>
            <param name="lpwndpl">
            A pointer to the WINDOWPLACEMENT structure that receives the show state and position information.
            <para>
            Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT).
            GetWindowPlacement fails if lpwndpl-> length is not set correctly.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            <para>
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </para>
            </returns>
        </member>
        <member name="T:RestoreWindowPlace.XmlSettingManager`1">
            <summary>
            Save and load object to/from XML file
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RestoreWindowPlace.XmlSettingManager`1.#ctor(System.String)">
            <summary>
            Set file name
            </summary>
            <param name="filePath">name of XML file</param>
        </member>
        <member name="M:RestoreWindowPlace.XmlSettingManager`1.SaveXml(`0)">
            <summary>
            Serialize object and save to XML file
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:RestoreWindowPlace.XmlSettingManager`1.LoadXml">
            <summary>
            Load XML file
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
